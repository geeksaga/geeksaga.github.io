<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dd on Terminal</title>
    <link>/tags/dd/</link>
    <description>Recent content in dd on Terminal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/dd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>dd command</title>
      <link>/posts/linux/command/2020-09-11-dd/</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux/command/2020-09-11-dd/</guid>
      <description>linux의 dd 명령어를 통해 파일을 변환하거나 복사 할 수 있습니다.
기본 사용법 $&amp;gt; dd [OPERAND]... 응용  부팅 가능한 USB 만들기  $&amp;gt; sudo dd bs=4M if=archlinux-2020.09.01-x86_64.iso of=/dev/sdb status=progress oflag=sync 708837376 bytes (709 MB, 676 MiB) copied, 101.529 s, 7.0 MB/s 169+1 records in 169+1 records out 711983104 bytes (712 MB, 679 MiB) copied, 101.957 s, 7.0 MB/s TLDR $&amp;gt; tldr dd dd Convert and copy a file. - Make a bootable usb drive from an isohybrid file (such like archlinux-xxx.</description>
      <content>&lt;p&gt;linux의 &lt;code&gt;dd&lt;/code&gt; 명령어를 통해 파일을 변환하거나 복사 할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;기본-사용법&#34;&gt;기본 사용법&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$&amp;gt; dd &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;OPERAND&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;응용&#34;&gt;응용&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;부팅 가능한 USB 만들기&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$&amp;gt; sudo dd bs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;4M &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;archlinux-2020.09.01-x86_64.iso of&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/dev/sdb status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;progress oflag&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sync
&lt;span style=&#34;color:#ae81ff&#34;&gt;708837376&lt;/span&gt; bytes &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;709&lt;/span&gt; MB, &lt;span style=&#34;color:#ae81ff&#34;&gt;676&lt;/span&gt; MiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; copied, 101.529 s, 7.0 MB/s
169+1 records in
169+1 records out
&lt;span style=&#34;color:#ae81ff&#34;&gt;711983104&lt;/span&gt; bytes &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;712&lt;/span&gt; MB, &lt;span style=&#34;color:#ae81ff&#34;&gt;679&lt;/span&gt; MiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; copied, 101.957 s, 7.0 MB/s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tldr&#34;&gt;TLDR&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$&amp;gt; tldr dd

  dd

  Convert and copy a file.

  - Make a bootable usb drive from an isohybrid file &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;such like archlinux-xxx.iso&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; and show the progress:
    dd &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file.iso of&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/dev/usb_drive status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;progress

  - Clone a drive to another drive with 4MB block, ignore error and show progress:
    dd &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/dev/source_drive of&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/dev/dest_drive bs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;4M conv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;noerror status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;progress

  - Generate a file of &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; random bytes by using kernel random driver:
    dd &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/dev/urandom of&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;random_file bs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

  - Benchmark the write performance of a disk:
    dd &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/dev/zero of&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file_1GB bs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000000&lt;/span&gt;

  - Check progress of an ongoing dd operation &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Run this command from another shell&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
    kill -USR1 &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pgrep ^dd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;help&#34;&gt;Help&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$&amp;gt; dd --help
Usage: dd &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;OPERAND&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;...
  or:  dd OPTION
Copy a file, converting and formatting according to the operands.

  bs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;BYTES        read and write up to BYTES bytes at a time
  cbs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;BYTES       convert BYTES bytes at a time
  conv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;CONVS      convert the file as per the comma separated symbol list
  count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;N         copy only N input blocks
  ibs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;BYTES       read up to BYTES bytes at a time &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;default: 512&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;FILE         read from FILE instead of stdin
  iflag&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;FLAGS     read as per the comma separated symbol list
  obs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;BYTES       write BYTES bytes at a time &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;default: 512&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  of&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;FILE         write to FILE instead of stdout
  oflag&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;FLAGS     write as per the comma separated symbol list
  seek&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;N          skip N obs-sized blocks at start of output
  skip&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;N          skip N ibs-sized blocks at start of input
  status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;LEVEL    The LEVEL of information to print to stderr;
                  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;none&amp;#39;&lt;/span&gt; suppresses everything but error messages,
                  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;noxfer&amp;#39;&lt;/span&gt; suppresses the final transfer statistics,
                  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;progress&amp;#39;&lt;/span&gt; shows periodic transfer statistics

N and BYTES may be followed by the following multiplicative suffixes:
c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1, w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;2, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;512, kB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1000, K &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1024, MB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1000*1000, M &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1024*1024, xM &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;M
GB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1000*1000*1000, G &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1024*1024*1024, and so on &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; T, P, E, Z, Y.

Each CONV symbol may be:

  ascii     from EBCDIC to ASCII
  ebcdic    from ASCII to EBCDIC
  ibm       from ASCII to alternate EBCDIC
  block     pad newline-terminated records with spaces to cbs-size
  unblock   replace trailing spaces in cbs-size records with newline
  lcase     change upper &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; to lower &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;
  ucase     change lower &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; to upper &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;
  sparse    try to seek rather than write the output &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; NUL input blocks
  swab      swap every pair of input bytes
  sync      pad every input block with NULs to ibs-size; when used
            with block or unblock, pad with spaces rather than NULs
  excl      fail &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; the output file already exists
  nocreat   &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not create the output file
  notrunc   &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not truncate the output file
  noerror   &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt; after read errors
  fdatasync  physically write output file data before finishing
  fsync     likewise, but also write metadata

Each FLAG symbol may be:

  append    append mode &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;makes sense only &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; output; conv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;notrunc suggested&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  direct    use direct I/O &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; data
  directory  fail unless a directory
  dsync     use synchronized I/O &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; data
  sync      likewise, but also &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; metadata
  fullblock  accumulate full blocks of input &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;iflag only&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  nonblock  use non-blocking I/O
  noatime   &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not update access time
  nocache   Request to drop cache.  See also oflag&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sync
  noctty    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not assign controlling terminal from file
  nofollow  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not follow symlinks
  count_bytes  treat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;count=N&amp;#39;&lt;/span&gt; as a byte count &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;iflag only&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  skip_bytes  treat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;skip=N&amp;#39;&lt;/span&gt; as a byte count &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;iflag only&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  seek_bytes  treat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;seek=N&amp;#39;&lt;/span&gt; as a byte count &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;oflag only&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

Sending a USR1 signal to a running &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dd&amp;#39;&lt;/span&gt; process makes it
print I/O statistics to standard error and &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; resume copying.

Options are:

      --help     display this help and exit
      --version  output version information and exit

GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/dd&amp;gt;
or available locally via: info &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(coreutils) dd invocation&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
  </channel>
</rss>
